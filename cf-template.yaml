AWSTemplateFormatVersion: "2010-09-09"
Description: sample alb and ec2

Parameters:
  ProjectName:
    Type: String
    Default: hs-alb-ec2
  CidrBlockVPC:
    Type: String
    Default: 172.16.0.0/16
  CidrBlockPublicSubnetA:
    Type: String
    Default: 172.16.0.0/24
  CidrBlockPublicSubnetC:
    Type: String
    Default: 172.16.1.0/24
  CidrBlockPrivateSubnetA:
    Type: String
    Default: 172.16.10.0/24
  CidrBlockPrivateSubnetC:
    Type: String
    Default: 172.16.11.0/24

Resources:
  ###################################################################
  # VPC
  ###################################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlockVPC
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ProjectName, "vpc" ] ]
  ###################################################################
  # パブリックサブネット
  ###################################################################
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CidrBlockPublicSubnetA
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ProjectName, "public", "subnet", "a" ] ]
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CidrBlockPublicSubnetC
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ProjectName, "public", "subnet", "c" ] ]
  ###################################################################
  # プライベートサブネット
  ###################################################################
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CidrBlockPrivateSubnetA
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ProjectName,  "private", "subnet", "a" ] ]
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CidrBlockPrivateSubnetC
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref ProjectName,  "private", "subnet", "c" ] ]
  ###################################################################
  # インターネットゲートウェイ
  ###################################################################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "igw" ] ]
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  ###################################################################
  # NATゲートウェイ
  ###################################################################
  NATElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "eip" ] ]
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATElasticIP.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "nat" ] ]
  ###################################################################
  # パブリックルートテーブル
  ###################################################################
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "public", "rtb" ] ]
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetCRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnetC
  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  ###################################################################
  # プライベートルートテーブル
  ###################################################################
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "private", "rtb" ] ]
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC
  RoutePrivate:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway
  ###################################################################
  # SSM用 VPCエンドポイント
  ###################################################################
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-", [ !Ref AWS::StackName,"vpc", "ep", "sg" ] ]
      GroupDescription: "vpc endpoint security group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref CidrBlockVPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "vpc","ep", "sg" ] ]
  VPCEndpointSSM:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.ap-northeast-1.ssm
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  # SSM用
  VPCEndpointSSMMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.ap-northeast-1.ssmmessages
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  # SSM用
  VPCEndpointEC2Message:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.ap-northeast-1.ec2messages
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
  ###################################################################
  # IAM for EC2
  ###################################################################
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref AWS::StackName, "ec2", "role" ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref "EC2Role"
  ###################################################################
  # EC2
  ###################################################################
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-", [ !Ref AWS::StackName,"ec2", "sg" ] ]
      GroupDescription: "ec2 security group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CidrBlockVPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "sg" ] ]
  EC2:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            run1Nginx:
              command: "amazon-linux-extras install nginx1"
          services:
            sysvinit:
              nginx:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/nginx/nginx.conf"
                  - "/etc/nginx/conf.d/default.conf"
                sources:
                  - "/var/www/html"
    Properties:
      ImageId: "ami-0bba69335379e17f8"
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: aws-rirazou0101
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "ec2" ] ]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref PrivateSubnetA
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v \
            --stack ${AWS::StackName} \
            --resource EC2 \
            --region ${AWS::Region}
  ###################################################################
  # ALB Log Bucket
  ###################################################################
  ALBLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", [ !Ref ProjectName, "alb", "log" ] ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Status: Enabled
  ALBLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ALBLogBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Principal:
              AWS: !Sub arn:aws:iam::582318560864:root # AWSがELBを管理しているアカウントのID
            Resource:
              - !Sub arn:aws:s3:::${ALBLogBucket}/AWSLogs/${AWS::AccountId}/*
  ###################################################################
  # ALB
  ###################################################################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-", [ !Ref AWS::StackName,"alb", "sg" ] ]
      GroupDescription: "alb security group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref AWS::StackName, "sg" ] ]
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join [ "-", [ !Ref ProjectName, "alb", "tg" ] ]
      HealthCheckEnabled: true
      Protocol: HTTP
      Port: 80
      TargetType: instance
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref EC2
          Port: 80
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: !Join [ "-", [ !Ref ProjectName, "alb" ] ]
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref ALBLogBucket
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP